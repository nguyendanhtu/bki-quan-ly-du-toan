// VBConversions Note: VB project level imports
using System.Collections;
using System;
using System.Diagnostics;
using Microsoft.VisualBasic;
using System.Data;
// End of VB project level imports

using System.Runtime.Serialization;
using System.Xml;

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------




namespace IP.Core.IPCommon
{
	[Serializable(), 
	System.ComponentModel.DesignerCategoryAttribute("code"), 
	System.Diagnostics.DebuggerStepThrough(), 
	System.ComponentModel.ToolboxItem(true)]public class Users_DataSet : DataSet
	{
		
		private Users_DataSetDataTable tableUsers_DataSet;
		
		public Users_DataSet()
		{
			this.InitClass();
			System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			this.Tables.CollectionChanged += schemaChangedHandler;
			this.Relations.CollectionChanged += schemaChangedHandler;
		}
		
		protected Users_DataSet(SerializationInfo info, StreamingContext context)
		{
			string strSchema = System.Convert.ToString(info.GetValue("XmlSchema", typeof(System.String)));
			if (!((strSchema) == null))
			{
				DataSet ds = new DataSet();
				ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
				if (!((ds.Tables["Users_DataSet"]) == null))
				{
					this.Tables.Add(new Users_DataSetDataTable(ds.Tables["Users_DataSet"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else
			{
				this.InitClass();
			}
			this.GetSerializationData(info, context);
			System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			this.Tables.CollectionChanged += schemaChangedHandler;
			this.Relations.CollectionChanged += schemaChangedHandler;
		}
		
[System.ComponentModel.Browsable(false), 
System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]public Users_DataSetDataTable Users_DataSet_Renamed
		{
			get
			{
				return this.tableUsers_DataSet;
			}
		}
		
		public override DataSet Clone()
		{
			Users_DataSet cln = (Users_DataSet) (base.Clone());
			cln.InitVars();
			return cln;
		}
		
		protected override bool ShouldSerializeTables()
		{
			return false;
		}
		
		protected override bool ShouldSerializeRelations()
		{
			return false;
		}
		
		protected override void ReadXmlSerializable(XmlReader reader)
		{
			this.Reset();
			DataSet ds = new DataSet();
			ds.ReadXml(reader);
			if (!((ds.Tables["Users_DataSet"]) == null))
			{
				this.Tables.Add(new Users_DataSetDataTable(ds.Tables["Users_DataSet"]));
			}
			this.DataSetName = ds.DataSetName;
			this.Prefix = ds.Prefix;
			this.Namespace = ds.Namespace;
			this.Locale = ds.Locale;
			this.CaseSensitive = ds.CaseSensitive;
			this.EnforceConstraints = ds.EnforceConstraints;
			this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			this.InitVars();
		}
		
		protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
		{
			System.IO.MemoryStream stream = new System.IO.MemoryStream();
			this.WriteXmlSchema(new XmlTextWriter(stream, null));
			stream.Position = 0;
			return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
		}
		
		internal void InitVars()
		{
			this.tableUsers_DataSet = (Users_DataSetDataTable) (this.Tables["Users_DataSet"]);
			if (!((this.tableUsers_DataSet) == null))
			{
				this.tableUsers_DataSet.InitVars();
			}
		}
		
		private void InitClass()
		{
			this.DataSetName = "Users_DataSet";
			this.Prefix = "";
			this.Namespace = "http://tempuri.org/Users_DataSet.xsd";
			this.Locale = new System.Globalization.CultureInfo("en-US");
			this.CaseSensitive = false;
			this.EnforceConstraints = true;
			this.tableUsers_DataSet = new Users_DataSetDataTable();
			this.Tables.Add(this.tableUsers_DataSet);
		}
		
		private bool ShouldSerializeUsers_DataSet()
		{
			return false;
		}
		
		private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
		{
			if (e.Action == System.ComponentModel.CollectionChangeAction.Remove)
			{
				this.InitVars();
			}
		}
		
		public delegate void Users_DataSetRowChangeEventHandler(object sender, Users_DataSetRowChangeEvent e);
		
		[System.Diagnostics.DebuggerStepThrough()]public class Users_DataSetDataTable : DataTable, System.Collections.IEnumerable
		{
			
			private DataColumn columnFileName;
			
			private DataColumn columnUserName;
			
			private DataColumn columnDescription;
			
			private DataColumn columnFromNum;
			
			private DataColumn columnToNum;
			
			internal Users_DataSetDataTable() : base("Users_DataSet")
			{
				this.InitClass();
			}
			
			internal Users_DataSetDataTable(DataTable table) : base(table.TableName)
			{
				if (table.CaseSensitive != table.DataSet.CaseSensitive)
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if (table.Locale.ToString() != table.DataSet.Locale.ToString())
				{
					this.Locale = table.Locale;
				}
				if (table.Namespace != table.DataSet.Namespace)
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
				this.DisplayExpression = table.DisplayExpression;
			}
			
[System.ComponentModel.Browsable(false)]public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
internal DataColumn FileNameColumn
			{
				get
				{
					return this.columnFileName;
				}
			}
			
internal DataColumn UserNameColumn
			{
				get
				{
					return this.columnUserName;
				}
			}
			
internal DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
internal DataColumn FromNumColumn
			{
				get
				{
					return this.columnFromNum;
				}
			}
			
internal DataColumn ToNumColumn
			{
				get
				{
					return this.columnToNum;
				}
			}
			
public Users_DataSetRow this[int index]
			{
				get
				{
					return ((Users_DataSetRow) (this.Rows[index]));
				}
			}
			
			private Users_DataSetRowChangeEventHandler Users_DataSetRowChangedEvent;
			public event Users_DataSetRowChangeEventHandler Users_DataSetRowChanged
			{
				add
				{
					Users_DataSetRowChangedEvent = (Users_DataSetRowChangeEventHandler) System.Delegate.Combine(Users_DataSetRowChangedEvent, value);
				}
				remove
				{
					Users_DataSetRowChangedEvent = (Users_DataSetRowChangeEventHandler) System.Delegate.Remove(Users_DataSetRowChangedEvent, value);
				}
			}
			
			
			private Users_DataSetRowChangeEventHandler Users_DataSetRowChangingEvent;
			public event Users_DataSetRowChangeEventHandler Users_DataSetRowChanging
			{
				add
				{
					Users_DataSetRowChangingEvent = (Users_DataSetRowChangeEventHandler) System.Delegate.Combine(Users_DataSetRowChangingEvent, value);
				}
				remove
				{
					Users_DataSetRowChangingEvent = (Users_DataSetRowChangeEventHandler) System.Delegate.Remove(Users_DataSetRowChangingEvent, value);
				}
			}
			
			
			private Users_DataSetRowChangeEventHandler Users_DataSetRowDeletedEvent;
			public event Users_DataSetRowChangeEventHandler Users_DataSetRowDeleted
			{
				add
				{
					Users_DataSetRowDeletedEvent = (Users_DataSetRowChangeEventHandler) System.Delegate.Combine(Users_DataSetRowDeletedEvent, value);
				}
				remove
				{
					Users_DataSetRowDeletedEvent = (Users_DataSetRowChangeEventHandler) System.Delegate.Remove(Users_DataSetRowDeletedEvent, value);
				}
			}
			
			
			private Users_DataSetRowChangeEventHandler Users_DataSetRowDeletingEvent;
			public event Users_DataSetRowChangeEventHandler Users_DataSetRowDeleting
			{
				add
				{
					Users_DataSetRowDeletingEvent = (Users_DataSetRowChangeEventHandler) System.Delegate.Combine(Users_DataSetRowDeletingEvent, value);
				}
				remove
				{
					Users_DataSetRowDeletingEvent = (Users_DataSetRowChangeEventHandler) System.Delegate.Remove(Users_DataSetRowDeletingEvent, value);
				}
			}
			
			
			public void AddUsers_DataSetRow(Users_DataSetRow row)
			{
				this.Rows.Add(row);
			}
			
			public Users_DataSetRow AddUsers_DataSetRow(string FileName, string UserName, string Description, long FromNum, long ToNum)
			{
				Users_DataSetRow rowUsers_DataSetRow = (Users_DataSetRow) (this.NewRow());
				rowUsers_DataSetRow.ItemArray = new object[] {FileName, UserName, Description, FromNum, ToNum};
				this.Rows.Add(rowUsers_DataSetRow);
				return rowUsers_DataSetRow;
			}
			
			public System.Collections.IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}
			
			public override DataTable Clone()
			{
				Users_DataSetDataTable cln = (Users_DataSetDataTable) (base.Clone());
				cln.InitVars();
				return cln;
			}
			
			protected override DataTable CreateInstance()
			{
				return new Users_DataSetDataTable();
			}
			
			internal void InitVars()
			{
				this.columnFileName = this.Columns["FileName"];
				this.columnUserName = this.Columns["UserName"];
				this.columnDescription = this.Columns["Description"];
				this.columnFromNum = this.Columns["FromNum"];
				this.columnToNum = this.Columns["ToNum"];
			}
			
			private void InitClass()
			{
				this.columnFileName = new DataColumn("FileName", typeof(System.String), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnFileName);
				this.columnUserName = new DataColumn("UserName", typeof(System.String), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnUserName);
				this.columnDescription = new DataColumn("Description", typeof(System.String), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnDescription);
				this.columnFromNum = new DataColumn("FromNum", typeof(System.Int64), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnFromNum);
				this.columnToNum = new DataColumn("ToNum", typeof(System.Int64), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnToNum);
				this.columnDescription.AllowDBNull = false;
				this.columnFromNum.AllowDBNull = false;
				this.columnToNum.AllowDBNull = false;
			}
			
			public Users_DataSetRow NewUsers_DataSetRow()
			{
				return ((Users_DataSetRow) (this.NewRow()));
			}
			
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
			{
				return new Users_DataSetRow(builder);
			}
			
			protected override System.Type GetRowType()
			{
				return typeof(Users_DataSetRow);
			}
			
			protected override void OnRowChanged(DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if (!((this.Users_DataSetRowChangedEvent) == null))
				{
					if (Users_DataSetRowChangedEvent != null)
						Users_DataSetRowChangedEvent(this, new Users_DataSetRowChangeEvent(((Users_DataSetRow) e.Row), e.Action));
				}
			}
			
			protected override void OnRowChanging(DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if (!((this.Users_DataSetRowChangingEvent) == null))
				{
					if (Users_DataSetRowChangingEvent != null)
						Users_DataSetRowChangingEvent(this, new Users_DataSetRowChangeEvent(((Users_DataSetRow) e.Row), e.Action));
				}
			}
			
			protected override void OnRowDeleted(DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if (!((this.Users_DataSetRowDeletedEvent) == null))
				{
					if (Users_DataSetRowDeletedEvent != null)
						Users_DataSetRowDeletedEvent(this, new Users_DataSetRowChangeEvent(((Users_DataSetRow) e.Row), e.Action));
				}
			}
			
			protected override void OnRowDeleting(DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if (!((this.Users_DataSetRowDeletingEvent) == null))
				{
					if (Users_DataSetRowDeletingEvent != null)
						Users_DataSetRowDeletingEvent(this, new Users_DataSetRowChangeEvent(((Users_DataSetRow) e.Row), e.Action));
				}
			}
			
			public void RemoveUsers_DataSetRow(Users_DataSetRow row)
			{
				this.Rows.Remove(row);
			}
		}
		
		[System.Diagnostics.DebuggerStepThrough()]public class Users_DataSetRow : DataRow
		{
			
			private Users_DataSetDataTable tableUsers_DataSet;
			
			internal Users_DataSetRow(DataRowBuilder rb) : base(rb)
			{
				this.tableUsers_DataSet = (Users_DataSetDataTable) this.Table;
			}
			
public string FileName
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableUsers_DataSet.FileNameColumn]);
					}
					catch (InvalidCastException e)
					{
						throw (new StrongTypingException("Cannot get value because it is DBNull.", e));
					}
				}
				set
				{
					this[this.tableUsers_DataSet.FileNameColumn] = value;
				}
			}
			
public string UserName
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableUsers_DataSet.UserNameColumn]);
					}
					catch (InvalidCastException e)
					{
						throw (new StrongTypingException("Cannot get value because it is DBNull.", e));
					}
				}
				set
				{
					this[this.tableUsers_DataSet.UserNameColumn] = value;
				}
			}
			
public string Description
			{
				get
				{
					return System.Convert.ToString(this[this.tableUsers_DataSet.DescriptionColumn]);
				}
				set
				{
					this[this.tableUsers_DataSet.DescriptionColumn] = value;
				}
			}
			
public long FromNum
			{
				get
				{
					return ((long) (this[this.tableUsers_DataSet.FromNumColumn]));
				}
				set
				{
					this[this.tableUsers_DataSet.FromNumColumn] = value;
				}
			}
			
public long ToNum
			{
				get
				{
					return ((long) (this[this.tableUsers_DataSet.ToNumColumn]));
				}
				set
				{
					this[this.tableUsers_DataSet.ToNumColumn] = value;
				}
			}
			
			public bool IsFileNameNull()
			{
				return this.IsNull(this.tableUsers_DataSet.FileNameColumn);
			}
			
			public void SetFileNameNull()
			{
				this[this.tableUsers_DataSet.FileNameColumn] = System.Convert.DBNull;
			}
			
			public bool IsUserNameNull()
			{
				return this.IsNull(this.tableUsers_DataSet.UserNameColumn);
			}
			
			public void SetUserNameNull()
			{
				this[this.tableUsers_DataSet.UserNameColumn] = System.Convert.DBNull;
			}
		}
		
		[System.Diagnostics.DebuggerStepThrough()]public class Users_DataSetRowChangeEvent : EventArgs
		{
			
			private Users_DataSetRow eventRow;
			
			private DataRowAction eventAction;
			
			public Users_DataSetRowChangeEvent(Users_DataSetRow row, DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}
			
public Users_DataSetRow Row
			{
				get
				{
					return this.eventRow;
				}
			}
			
public DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}
	}
	
}
